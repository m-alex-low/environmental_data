---
title: "Alex's R Reference Guide"
author: "Alex Low"
date: "2022-12-11"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

# Loading Data and Packages {.tabset .tabset-pills}
## library() and require()
Many projects in R will require you to make use of external packages. The library() and require() commands
load these external packages into your environment, allowing you to use the associated data and commands. Though in
most cases functionally similar, the two differ in that the library() command will stop your code from running if the
required package is unavailable or has not been installed, while require() will not, but will silently return a boolean value based on whether the package is available.
```{r library_readE1}
# Examples of proper library and require syntax
library(here)
require(palmerpenguins)
```
## loading data using here() and read.csv()
To load data from external files, we typically make use of there here() function in the here package loaded previously. This function makes loading data more convenient by allowing us to reference relative file paths, rather than absolute ones. When used, the here() command references the top-level directory of the current r project. If project data is stored in this directory when it is shared, collaborators are easily able to load and use data without having to change file paths.
```{r hereE1}
# Using the here() function, we list all the files in our "data" folder within the project directory
list.files(here("data"))
```
As our data commonly comes in csv format, we also make frequent use of the read.csv() command, which is able to read in data to our environment from external csv files.
```{r read.csvE1}
# Reading in a csv file "ginkgo data 2022" from our project data folder
ginkgo_data <- data.frame(read.csv(here("data","ginkgo_data_2022.csv")))
head(ginkgo_data)
```



# Data Structures {.tabset .tabset-pills}
## c()
The function c() combines or concatenates its arguments into a vector (a 1-dimensional data structure consisting of 1 or more elements). Do note, however, that all elements must be of the same type. Here's two examples using numeric and character types:
```{r cE1}
# Create a vector of numbers:
num_vec  = c(1, 4, 8, 9, 13)

# Create a vector of characters:
char_vec = c("a", "fish", "data is cool")
```
I can show the contents of a vector by typing the name of the vector, or using the print() function.
```{r cE2}
# Typing the name of the vector into the console prints the contents
num_vec
```
```{r cE3}
# The print() function accomplishes the same task:
print(char_vec)
```
## length()
The length() function is used to either retrieve the length of a vector or set it manually.
```{r LengthE1}
# Getting the length of a vector using length()
sample_vec = c(7, 8, 9)
length(sample_vec)
```
```{r lengthE2}
# Setting the length of a vector using length()
length(sample_vec) = 5
sample_vec
```
## matrix()
The matrix() function is used to create a 2d data structure, a "list of lists." This function takes arguments for a 1d set of data, along with the number of rows(nrow,) columns(ncol,) and byrow(true/false) which determines whether the matrix is populated by rows or by columns. 
```{r matrixE1}
#creating a 1d vector with values 1-9
sample_vec = c(1:9)
sample_vec
```
```{r matrixE2}
#creating a 3x3 matrix with values 1-9, populated by row
sample_mat = matrix(sample_vec, 3, 3, byrow=TRUE)
sample_mat
```
## data.frame()
Though matricies are helpful, they are restricted by the sample problem as vectors- they can only hold one type of data value, like characters or text. In the real world however, many datasets are a beautiful mix of all kinds of types. Data frames allow us to store and operate on 1d and 2d datasets where all values are not necessarily of the same type. Because of their flexibility, data frames are the preferred way of storing and operating on data in R.
```{r dataframeE1}
##creating a dataset of all different types through use of data.frame()
sample_1d = data.frame(c(1, "apple", TRUE))
sample_1d
```
## nrow()
The nrow() function can be used to find the number of rows in a given 2d dataset. Similarly to the length() function, it can also be used to set the number of rows manually, filling in NA values for newly created rows.
```{r nrowE1}
head(ginkgo_data)
```
```{r nrowE2}
nrow(ginkgo_data)
```
## ncol()
The ncol() function can be used to find the number of columns in a given 2d dataset. Similarly to the length() function, it can also be used to set the number of columns manually, filling in NA values for newly created columns.
```{r ncolE1}
head(ginkgo_data)
```
```{r ncolE2}
ncol(ginkgo_data)
```
## dim()
The dim() function can be used to find the dimensions of a given 2d dataset, in rows x columns. Again like the length() function, it can set the dimensions manually, filling in NA values for new rows and columns.
```{r dimE1}
head(ginkgo_data)
```
```{r dimE2}
dim(ginkgo_data)
```



# Subsetting {.tabset .tabset-pills}
## Subsetting by name
Using the $ operator, we can subset a given dataset by using the name of a column. Say, for example, that we were only interested in the notch depth attribute of our samples
```{r $E1}
head(ginkgo_data)
ginkgo_data$notch_depth
```
## Subsetting by position
Another way we can subset a given dataset is by referencing the coordinate position(s) of the data we are interested in. using the [] operator, we can pick out data of specified rows and columns using the syntax: data[row,col]
```{r posE1}
head(ginkgo_data)

#selecting the entire first row of the data
ginkgo_data[1,]
```
```{r posE2}
#selecting the element in row 2, column 3
ginkgo_data[2,3]
```
```{r posE3}
#selecting the entire 3rd column of the data
ginkgo_data[,3]
```
## Subsetting using subset()
Finally, another main way to subset a given dataset is to use the subset() function, which returns rows, columns, etc, that meet certain specified conditions.
```{r subsetE1}
#palmer penguins data
penguins
```
```{r subsetE2}
#retrieving all data for Adelie penguins (species = Adelie)
subset(penguins, species == "Adelie")
```



# Numerical Data Exploration {.tabset .tabset-pills}
## summary()
The summary() function provides some basic summary information on an object, depending on its type. Most commonly, this function can be used on datasets to provide some basic information on the range of values for given columns as well as on model fits to provide basic information on the relationship between variables and quality of fit
```{r summaryE1}
head(ginkgo_data)
```
```{r summaryE2}
summary(ginkgo_data)
```
```{r summaryE3}
ginkgo_width_by_depth = lm(max_width~max_depth, data = ginkgo_data)
summary(ginkgo_width_by_depth)
```
## mean()
The mean() function returns the arithmatic mean for a given set of data, requiring numeric inputs
```{r meanE1}
#using mean on a simple vector of numbers
sample_vec = c(1, 2, 3)
mean(sample_vec)
```
```{r meanE2}
#using mean() on the max depth column of the ginkgo dataset
head(ginkgo_data$max_depth)
mean(ginkgo_data$max_depth)
```
## sd()
the sd() function returns the standard deviation for a given set of data, requiring numeric inputs
```{r sdE1}
#using sd() on the max depth column of the ginkgo dataset
head(ginkgo_data$max_depth)
sd(ginkgo_data$max_depth)
```



# Graphical Data Exploration {.tabset .tabset-pills}
## plot()
The plot() function is used to draw basic scatterplots, and has some important arguments to keep in mind:  
x, y : the x any y arguments to be plotted against one another  
type : a string denoting the type of desired plot, "p" for points, "l" for lines, among others. points is default.  
pch : a number which designates which symbol is to be used as the "plotting character".  
cex : a number which multiplies the size of plotted text and symbols, relative to the default  
main : the main title for the plot  
xlab : the x axis label name  
ylab : the y axis label name  
xlim : the x axis limit, i.e., the final value the x axis will include  
ylim : the y axis limit, i.e., the final value the y axis will include
```{r plotE1}
head(ginkgo_data)
#a scatter plot of ginko width vs depth, using diamond symbols (pch = 5) scaled to be 2x as large as normal, with the title "Ginkgo Width vs Depth" and appropriate x and y axis labels. Both axes will only go from 20 -> 100.
plot(ginkgo_data$max_width ~ ginkgo_data$max_depth, pch = 5, cex = 2, main = "Ginkgo Width vs Depth", xlab = "Ginkgo Width (mm)", ylab = "Ginkgo Depth (mm)", xlim = c(20,100), ylim = c(20,100))
```
  
## hist()
The hist() function is used to draw basic histograms. The "breaks" argument can be used to manually set the breakpoints, and will accept values for either the number of break points (i.e. breaks = 12) or a vector of exactly where the breakpoints should be set (i.e. c(1:12)). "breaks" will also accept a formula to calculate the number of breaks or a breaks vector, i.e. breaks = sum(data$column)/10
```{r histE1}
head(ginkgo_data)
#a histogram with 10 breakpoints
hist(ginkgo_data$max_depth, breaks = 10)
#a histogram with defined breakpoints
hist(ginkgo_data$max_depth, breaks = c(20, 40, 60, 80, 100, 120, 140))
```
  
## boxplot()
The boxplot() funtion is used to generate basic box and whisker plots. Many of the stylistic arguments are identical to the hist() function.
```{r boxplotE1}
head(ginkgo_data$petiole_length)
#generating a boxplot of ginkgo petiole lengths
boxplot(ginkgo_data$petiole_length, ylab = "Petiole Length (mm)", main = "Ginkgo Leaf Petiole Length")
#generating a boxplot of ginkgo petiole lengths, conditioned by seeds_present
boxplot(petiole_length ~ seeds_present, data=ginkgo_data, ylab = "Petiole Length (mm)", xlab = "Seeds Present", 
        main = "Ginkgo Leaf Petiole Length by Seed Presence")
```
  
## par()
The par() argument can be used to adjust the graphical parameters of the plot viewer in the Rstudio program. Most commonly, we use this command to manually set the number of columns and rows of figures displayed in the viewer by use of the mfrows argument. By giving a vector in the form (nrows, ncols), we can set the number of rows and columns for display, which are then filled in order from left->right, top->bottom.
```{r parE1}
#setting our display to a 2x2 grid when displaying figures
par(mfrow = c(2,2))
#displaying 4 histograms in the 2x2 grid
hist(ginkgo_data$max_width, main = "Ginkgo Leaf Width", ylab = "Leaf Width (mm)")
hist(ginkgo_data$max_depth, main = "Ginkgo Leaf Depth", ylab = "Leaf Depth (mm)")
hist(ginkgo_data$notch_depth, main = "Ginkgo Leaf Notch Depth", ylab = "Leaf Notch Depth (mm)")
hist(ginkgo_data$petiole_length, main = "Ginkgo Leaf Petiole Length", ylab = "Leaf Petiole Length (mm)")
```

# Distribution Functions {.tabset .tabset-pills}
## dnorm()
The dnorm() function is used to determine relative likelihoods of observing specified values, given a normal distribution of a specified mean and standard deviation
```{r dnormE1}
#given a normal distribution with a mean of 0 and a standard deviation of 1, what are the chances of observing a value of 0.39?
dnorm(0.39, mean = 0, sd = 1)
#how about -0.11? which is more likely?
dnorm(-0.11, mean = 0, sd = 1)
```
This function can also be used to create data which follows normal data of specified mean and sd:
```{r dnormE2}
#creating 100 points, ranging from -5 to 5
x = seq(from = -5, to = 5, length.out = 100)
#storing the probability values for any given x, based on the defined normal distribution
y = dnorm(x, mean = 0, sd = 1)
plot(y ~ x, type = "l", ylab = "Probability Density")
```
  
## pnorm()
Where dnorm was used to tell us the relative likelihood of any given point, pnorm instead tells us the *cumulative* density of the given value, i.e., the likelihood of observing any value less than or equal to the given value
```{r pnormE1}
#given a normal distribution with a mean of 0 and a standard deviation of 1, what are the chances of observing a value of at least 0.39?
pnorm(0.39, mean = 0, sd = 1)
```
This function, too, can also be used for a graphical intuition of likelihood
```{r pnormE2}
#creating 100 points, ranging from -5 to 5
x = seq(from = -5, to = 5, length.out = 100)
#storing the cumulative probability values for any given x, based on the defined normal distribution
y = pnorm(x, mean = 0, sd = 1)
plot(y ~ x, type = "l", ylab = "Cumulative density")
```
  
## qnorm()
The last of the main normal distribution functions, qnorm essentially performs the opposite task of pnorm, returning the value of x for which a given cumulative probability density is reached. For example, you might use qnorm to determine at which point the cumulative probability density reaches 75%
```{r qnormE1}
#given a normal distribution with a mean of 0 and a standard deviation of 1, at what x is 75% cumulative probability density reached?
pnorm(0.75, mean = 0, sd = 1)
```

## dbinom()
Much like dnorm, dbinom is used to determine the relative likelihood of given points, though this time for binomial distributions of given size(number of trials) and probability (for a given trial)
```{r dbinomE1}
#given a binomial distribution of 6 coin flips, each trial having a 50% chance of success, how likely is it we get 3 heads (successes)?
dbinom(3, size = 6, prob = 0.5)
```
Again like dnorm, we can use this function as well for graphical intuition
```{r dbinomE2}
#creating a vector of values 0-6
x = 0:6
#storing respondent probabilities for each number of successes 1-6, given a 50% probability over 6 trials
y = dbinom(x, size = 6, prob = 0.5)
#plotting
barplot(height = y, names.arg = x, space = 0, ylab = "Pr(x)", main = "Binomial: n = 6, p = 0.5")

```
  
## pbinom()
pbinom is the function we use for calculating the *cumulative* density of a binomial distribution of given size(number of trials) and probability (for a given trial). Say, for example, the probability of getting 3 or less heads (successes) on 6 coin flips
```{r pbinomE1}
#given a binomial distribution of 6 coin flips, each trial having a 50% chance of success, how likely is it we get at least 3 heads (successes)?
pbinom(3, size = 6, prob = 0.5)

#creating a vector of values 0-6
x = 0:6
#storing respondent cumulative probabilities for each number of successes 1-6, given a 50% probability over 6 trials
y = pbinom(x, size = 6, prob = 0.5)
#plotting
barplot(height = y, names.arg = x, space = 0, ylab = "Pr(x)", main = "Binomial: n = 6, p = 0.5")

```
  
## qbinom()
qbinom is the function we use to return the value of x for which a given cumulative probability density is reached in a binomial distribution of given characteristics. It can essentially be thought of as the "reverse" of pbinom. To illustrate this, we can perform the opposite operation, finding the number of trials needed to reach a certain cumulative probability density, say 75%

```{r qbinomE1}
qbinom(0.75, size = 6, prob = 0.5)
```